//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockServiceConsumer.localhost {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GraphData", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class GraphData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="localhost.IStockService")]
    public interface IStockService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/GetDateRange", ReplyAction="http://tempuri.org/IStockService/GetDateRangeResponse")]
        StockServiceConsumer.localhost.GraphData[] GetDateRange(System.DateTime first, System.DateTime last);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/GetDateRange", ReplyAction="http://tempuri.org/IStockService/GetDateRangeResponse")]
        System.Threading.Tasks.Task<StockServiceConsumer.localhost.GraphData[]> GetDateRangeAsync(System.DateTime first, System.DateTime last);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/getSmallest", ReplyAction="http://tempuri.org/IStockService/getSmallestResponse")]
        double getSmallest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/getSmallest", ReplyAction="http://tempuri.org/IStockService/getSmallestResponse")]
        System.Threading.Tasks.Task<double> getSmallestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/getLargest", ReplyAction="http://tempuri.org/IStockService/getLargestResponse")]
        double getLargest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/getLargest", ReplyAction="http://tempuri.org/IStockService/getLargestResponse")]
        System.Threading.Tasks.Task<double> getLargestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/setSmallest", ReplyAction="http://tempuri.org/IStockService/setSmallestResponse")]
        double setSmallest(double smallest1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/setSmallest", ReplyAction="http://tempuri.org/IStockService/setSmallestResponse")]
        System.Threading.Tasks.Task<double> setSmallestAsync(double smallest1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/setLargest", ReplyAction="http://tempuri.org/IStockService/setLargestResponse")]
        double setLargest(double largest1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/setLargest", ReplyAction="http://tempuri.org/IStockService/setLargestResponse")]
        System.Threading.Tasks.Task<double> setLargestAsync(double largest1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/CalcMovingAverages", ReplyAction="http://tempuri.org/IStockService/CalcMovingAveragesResponse")]
        StockServiceConsumer.localhost.GraphData[] CalcMovingAverages(System.DateTime firstDate, System.DateTime lastDate, int numDays);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/CalcMovingAverages", ReplyAction="http://tempuri.org/IStockService/CalcMovingAveragesResponse")]
        System.Threading.Tasks.Task<StockServiceConsumer.localhost.GraphData[]> CalcMovingAveragesAsync(System.DateTime firstDate, System.DateTime lastDate, int numDays);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStockServiceChannel : StockServiceConsumer.localhost.IStockService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StockServiceClient : System.ServiceModel.ClientBase<StockServiceConsumer.localhost.IStockService>, StockServiceConsumer.localhost.IStockService {
        
        public StockServiceClient() {
        }
        
        public StockServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StockServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StockServiceConsumer.localhost.GraphData[] GetDateRange(System.DateTime first, System.DateTime last) {
            return base.Channel.GetDateRange(first, last);
        }
        
        public System.Threading.Tasks.Task<StockServiceConsumer.localhost.GraphData[]> GetDateRangeAsync(System.DateTime first, System.DateTime last) {
            return base.Channel.GetDateRangeAsync(first, last);
        }
        
        public double getSmallest() {
            return base.Channel.getSmallest();
        }
        
        public System.Threading.Tasks.Task<double> getSmallestAsync() {
            return base.Channel.getSmallestAsync();
        }
        
        public double getLargest() {
            return base.Channel.getLargest();
        }
        
        public System.Threading.Tasks.Task<double> getLargestAsync() {
            return base.Channel.getLargestAsync();
        }
        
        public double setSmallest(double smallest1) {
            return base.Channel.setSmallest(smallest1);
        }
        
        public System.Threading.Tasks.Task<double> setSmallestAsync(double smallest1) {
            return base.Channel.setSmallestAsync(smallest1);
        }
        
        public double setLargest(double largest1) {
            return base.Channel.setLargest(largest1);
        }
        
        public System.Threading.Tasks.Task<double> setLargestAsync(double largest1) {
            return base.Channel.setLargestAsync(largest1);
        }
        
        public StockServiceConsumer.localhost.GraphData[] CalcMovingAverages(System.DateTime firstDate, System.DateTime lastDate, int numDays) {
            return base.Channel.CalcMovingAverages(firstDate, lastDate, numDays);
        }
        
        public System.Threading.Tasks.Task<StockServiceConsumer.localhost.GraphData[]> CalcMovingAveragesAsync(System.DateTime firstDate, System.DateTime lastDate, int numDays) {
            return base.Channel.CalcMovingAveragesAsync(firstDate, lastDate, numDays);
        }
    }
}
